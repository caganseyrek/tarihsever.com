import fs from "fs";
import path from "path";

import { topicsMetadata } from "@/content/data/topics-metadata";

import { autogeneratedComment, dataDirectory } from "@/prepublish/common/node-data";
import { getArticleTitle, urlifyPath } from "@/prepublish/common/node-utils";

import type { ContentTreeProps } from "@/types/globals";

class ContentTreeBuilder {
  private static contentTree: ContentTreeProps[] = [];
  private static contentTreeLookup: string[] = [];
  private static contentTreeArticles: Record<string, string> = {};

  public static addToLookup(articleFullPath: string): void {
    const urlLikePath: string = urlifyPath(articleFullPath);

    // Add the formatted path to article lookup if it doesn't already exists
    if (!this.contentTreeLookup.includes(urlLikePath)) {
      this.contentTreeLookup.push(urlLikePath);
    }
  }

  public static addToContentTree(articleFullPath: string): void {
    const urlLikePath: string = urlifyPath(articleFullPath);
    const pathParts = urlLikePath.split("/");

    const [, topicKey, subtopicKey, articleKey] = pathParts;

    let topic = this.contentTree.find((topic) => topic.key === topicKey);
    if (!topic) {
      topic = {
        key: topicKey,
        title: topicsMetadata[topicKey].title,
        subtopics: [],
      };
      this.contentTree.push(topic);
    }

    let subtopic = topic.subtopics.find((subtopic) => subtopic.key === subtopicKey);
    if (!subtopic) {
      subtopic = {
        key: subtopicKey,
        title: topicsMetadata[topicKey].subtopicTitles[subtopicKey],
        articles: [],
      };
      topic.subtopics.push(subtopic);
    }

    if (!subtopic.articles.some((article) => article.key === articleKey)) {
      const articleTitle: string | undefined = getArticleTitle(articleFullPath);
      subtopic.articles.push({
        key: articleKey,
        title: articleTitle ?? "NO TITLE FOUND",
        path: urlLikePath,
      });

      if (articleTitle) {
        this.contentTreeArticles[urlLikePath] = articleTitle;
      }
    }
  }

  public static saveTo(outputFileName: string): void {
    const fileContents: string = `${autogeneratedComment}
// This file is auto-generated
import type { ContentTreeProps } from "@/types/globals";

const contentTreeLookup: Set<string> = new Set(${JSON.stringify([...this.contentTreeLookup], null, 2)});
const contentTreeArticles: Record<string, string> = ${JSON.stringify(this.contentTreeArticles, null, 2)};
const contentTree: ContentTreeProps[] = ${JSON.stringify(
      this.contentTree,
      (key, value) => {
        // For preventing reordering of content tree's items
        if (key === "") return value;
        return value;
      },
      2,
    )};
export { contentTreeLookup, contentTreeArticles, contentTree }`;
    const treeOutputPath: string = path.join(dataDirectory, outputFileName);
    fs.writeFileSync(treeOutputPath, fileContents, "utf8");
  }
}

export { ContentTreeBuilder };
