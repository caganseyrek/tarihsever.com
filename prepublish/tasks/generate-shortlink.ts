import fs from "fs";
import path from "path";

import { pathToShortlink } from "@/content/data/__generated__/shortlinks";

import { autogeneratedComment, dataDirectory } from "@/prepublish/common/node-data";
import { getFilePath, urlifyPath } from "@/prepublish/common/node-utils";

class ShortlinkGenerator {
  // Allowed characters for generating short link codes.
  private static shortlinkChars: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

  // A map of generated shortlinks and a set of generated shortlink codes to prevent duplicates.
  private static shortlinksMap: Map<string, string> = new Map();
  private static existingCodesSet: Set<string> = new Set();

  public static loadExisting = (): void => {
    // Reset the map and the set just in case
    this.shortlinksMap.clear();
    this.existingCodesSet.clear();

    // Add existing short links to the lists to make sure we are not
    // generating a duplicate short link
    for (const key in pathToShortlink) {
      if (fs.existsSync(getFilePath(key))) {
        this.shortlinksMap.set(pathToShortlink[key], key); // Map<code, path>()
        this.existingCodesSet.add(key);
      }
    }
  };

  public static generate(fullPath: string): void {
    const urlLikePath: string = urlifyPath(fullPath);

    // Return early if current path has already a code generated for it
    if (this.shortlinksMap.has(urlLikePath)) return;

    let code: string;
    do {
      code = Array.from(
        { length: 8 },
        () => this.shortlinkChars[Math.floor(Math.random() * this.shortlinkChars.length)],
      ).join("");
    } while (this.existingCodesSet.has(code));

    // Store the newly generated code to avoid duplicates
    this.existingCodesSet.add(code);
    this.shortlinksMap.set(code, urlLikePath);
  }

  public static saveTo(outputFileName: string): void {
    const shortlinkToPath: Record<string, string> = {};
    const pathToShortlink: Record<string, string> = {};

    for (const [path, code] of this.shortlinksMap.entries()) {
      shortlinkToPath[code] = path;
      pathToShortlink[path] = code;
    }

    // Save the generated article lookup set to the output set file
    const fileContents: string = `${autogeneratedComment}
const pathToShortlink: Record<string, string> = ${JSON.stringify(shortlinkToPath, null, 2)};
const shortlinkToPath: Record<string, string> = ${JSON.stringify(pathToShortlink, null, 2)};
export { pathToShortlink, shortlinkToPath };\n`;

    const outputPath: string = path.join(dataDirectory, outputFileName);
    fs.writeFileSync(outputPath, fileContents, "utf8");
  }
}

export { ShortlinkGenerator };
